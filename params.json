{
  "name": "Idl.mapsapi.net",
  "tagline": "",
  "body": "[![idl-public MyGet Build Status](https://www.myget.org/BuildSource/Badge/idl-public?identifier=95c60c91-9607-478d-b51a-679426498ab6)](https://www.myget.org/)\r\n# IDL.MapsApi.Net\r\n\r\nThis is a .Net library for accessing the Google Maps and MapBox geolocation APIs. At the moment there is only support for the forward lookup where you get a lat/long from a location string and reverse where you get an address from a lat/long. \r\nThe library is based on simple requests to the MapsApi client for the service that you requre:\r\n\r\n````c#\r\nIApiClient client = new new ApiClient();\r\nvar request = new GoogleForwardGeocodingRequest(key)\r\n    {\r\n        Query = \"BS13RW\"\r\n    };\r\nvar response = client.GetAsync(request);\r\n````\r\n\r\nEach request has a sepcific response that represents the data that the provider supplies, Google Maps and MapBox both return different data for the same type of request. MapsApi contains extension methods that convert these into a common format with a basic generic fields for what is required.\r\n`````c#\r\nvar response = client.GetAsync(request).Result.AsMapsApiGeocodingResult();\r\n`````\r\nThis returns a collection of Result objects.\r\n````c#\r\npublic class Result\r\n    {\r\n        public Address Address { get; internal set; }\r\n\r\n        public BoundingBox Boundry { get; internal set; }\r\n\r\n        public string Id { get; internal set; }\r\n\r\n        public Location Location { get; internal set; }\r\n    }\r\n````\r\nBy default the path and API keys are picked up from the AppSettings configuration section with the following keys:\r\n- MapBoxApiKey\r\n- MapBoxGeoApiEndPoint\r\n- GoogleMapsApiKey\r\n- GoogleMapsGeoApiEndPoint\r\n\r\nThis can be overridden by passing the root path to the ApiClient constructor or setting the RootPath of a request and passing in the api key to the request constructor. This is because from expreience the path formats can be different when using different requests to the same provider.\r\n\r\nIf you would rather use a different client that the built in one you can create a wrapper for libraries such as RestSharp.\r\n````c#\r\npublic class RestSharpClientWrapper : ApiClient\r\n  {\r\n      private readonly IRestClient _client;\r\n\r\n      public RestSharpClientWrapper(IRestClient client = null)\r\n      {\r\n          _client = client ?? new RestClient();\r\n          _client.ClearHandlers();\r\n          _client.AddHandler(\"application/vnd.geo+json\", new JsonDeserializer());\r\n      }\r\n\r\n      public override Task<TResponse> GetAsync<TResponse>(IRequest<TResponse> request)\r\n      {\r\n          _client.BaseUrl = new Uri(request.RootPath);\r\n          var response = _client.GetTaskAsync<TResponse>(new RestRequest(request.Path) { RequestFormat = DataFormat.Json });\r\n          return response;\r\n      }\r\n  }\r\n  ````\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}